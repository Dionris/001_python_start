# Функция map, Что делает функция map

# Схема:
# map(func, *iterables) --> map object

# map - это итератор (обьект перебора) который вычисляет результат работы функции на каждый аргумент
# этой последовательности (итерируемого обьекта)

print('Пример 1')
a = [-1, 2, -3, 4, 5]

# можно передавать встроенную функцию
b = map(abs, a)
print(b)

b = list(map(abs, a))  # чтобы увидеть результат мы итерируемый обьект оборачиваем в любой тип коллекции (например
# список) и мы видим что благодаря 'map' к каждому значению поочередно применилась функция abs()
print(b)

# можно было использовать и через генератор списка
c = [abs(i) for i in a]
print(c)

print('Пример 2')


# можно передавать и собственные функции
def f(x):
    return x ** 2


bb = list(map(f, a))
print(bb)

print('Пример 3')

aa = ['hello', 'hi', 'hello world']
bbb = list(map(len, aa))  # вернем длину строк
print(bbb)

# Можем и методы вызвать вместо функций
bbbb = list(map(str.upper, aa))  # upper - метод у обьекта 'str'
print(bbbb)

print('Пример 4')

# Можем ианонимные функции передавать

bbbbb = list(map(lambda x: x[::-1], aa))  # [::-1] - это срез с помощью которого получаем строку наоборот
print(bbbbb)

# также это можем сделать и при помощи генератора списка
cc = [i[::-1] for i in aa]
print(cc)

# можем к концу переменой добавить какой либо знак
bbbbbb = list(map(lambda x: x + '!', aa))
print(bbbbbb)

# можем преобразовать к списку т.е. каждая буква строки будет отдельным элементом
bbbbbbb = list(map(list, aa))
print(bbbbbbb)
# также можем продолжить и отсортировать элементы полученного список по алфавиту
ccc = list(map(sorted, bbbbbbb))
print(ccc)

print('Пример 5')
#

# s = int(input()) # передаем туда несколько цифр подряд, например: 4 5 7 45 23
# print(s) # получаем ошибку, изза того что мы не можем преоброзовать пробел к целому числу
# для этого нам понадобиться функция map

ss = list(map(int, input().split()))  # split() -  разрежет строку по пробелам и через 'map' применим к каждому
# элементу функцию 'int'
print(ss)
