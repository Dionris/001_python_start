# Кортеж

a = 1, 2, 3, [10, 20, 30]
aa = 1, 2, 3

b = tuple((4, 5, 6))
c = ()
d = tuple()
print(a, type(a))

# длина
print(len(a))

# находится ли эл. 2 в кортеже a
print(2 in a)
print(2 in a, 5 in a, 6 not in a)  # находится ли эл. 2 и 5 в кортеже a, и проверяем 6 не в списке a

# складывание кортежей , главное очередность
print(aa + b, b + aa)

# можно дублировать
print(a * 2)

# можно сравнивать
print(min(b), max(b))

# можно сложить все однотипные числа в кортеже
print(sum(b))

# обращение к элементам обьекта
print(a[0])

# в кортеже НЕЛЬЗЯ изменять элементы
# a[1] = 100


# Методы кортежа (всего 2)

# показывает элемент запрашиваемого индекса
print(a.index(1))

# считает сколь раз появлялся элемент (например элемент 2)
print(a.count(2))

# опять пошли Операции

# кортежи нельзя редактировать но список в нем можно
print(a[3])
a[3].append(40)
print(a)

# кортежи меньше занимают памяти
m = [1, 2, 'hello', 4, 5, True, [10, 11, 12]]
v = tuple([1, 2, 'hello', 4, 5, True, [10, 11, 12]])
print(m.__sizeof__())  # служебный метод узает размер места (байт)
print(v.__sizeof__())

# кортежи могут быть использоваться в качестве ключей словаря
f = (1, 2, 3)
j = [1, 2, 3]  # получим ошибку если будет в качестве ключа использовать список
k = {}
k[f] = 'hello'
# k[j] = 'hi'  # получим ошибку так как список изменяемый обьект
print(k)

# кортеж можем преоброзовать в список
s = (1, 2, 3)
s = list(s)
s.append(4)
s.reverse()  # по эбыванию
print(s, type(s))
s = tuple(s)  # возвращаем список в кортеж
print(s, type(s))

# обходить элементы последовательности циклом for, обходим обозначения
t = (1, 2, 3, 100, 32, 'hello', 54)
for i in t:
    print(i)

print("новое упорядочивание")

# обойти упорядочность по индексу
for i in range(len(t)):
    print(t[i])
